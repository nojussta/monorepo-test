name: Build

on:
  push:

env:
  FE1_PATHS: "apps/fe1, tools"
  FE2_PATHS: "apps/fe2, tools"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      fe1_changed: ${{ steps.filter.outputs.fe1_changed }}
      fe2_changed: ${{ steps.filter.outputs.fe2_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Filter which workflows to run
      #   id: filter
      #   env:
      #     PREVIOUS_COMMIT: ${{ github.event.before }}
      #   run: |
      #     echo "Checking for changes in frontend apps..."

      #     if [[ "$GITHUB_REF_NAME" != "main" ]]; then
      #       BASE_REF="$PREVIOUS_COMMIT"
      #       HEAD_REF="$GITHUB_SHA"
      #       git diff --name-only $BASE_REF $HEAD_REF > changed_files.txt
      #     else
      #       git diff --name-only origin/main~1 origin/main > changed_files.txt
      #     fi

      #     for var in FE1_PATHS FE2_PATHS; do
      #       changed=false
      #       while read -r path; do
      #         [[ -z "$path" ]] && continue
      #         grep -q "^$path" changed_files.txt && changed=true && break
      #       done <<< "${!var}"
      #       key=$(echo "$var" | tr '[:upper:]' '[:lower:]' | sed 's/_paths//')
      #       echo "$key"_changed=$changed >> $GITHUB_OUTPUT
      #     done

      #     printenv

      - name: Filter which workflows to run
        id: filter
        env:
          PREVIOUS_COMMIT: ${{ github.event.before }}
        shell: pwsh
        run: |
          Write-Host "Checking for changes in frontend apps..."

          if ($env:GITHUB_REF_NAME -ne "main") {
              $baseRef = $env:PREVIOUS_COMMIT
              $headRef = $env:GITHUB_SHA
          }
          else {
              $baseRef = "origin/main~1"
              $headRef = "origin/main"
          }

          $changedFiles = git diff --name-only $baseRef $headRef | Where-Object { $_ -ne "" }

          $apps = @('FE1_PATHS', 'FE2_PATHS')
          foreach ($app in $apps) {
              $changed = $false
              $paths = (${env:$app} -split ",") | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
              foreach ($path in $paths) {
                  foreach ($file in $changedFiles) {
                      if ($file.StartsWith($path)) {
                          $changed = $true
                          break
                      }
                  }
                  if ($changed) { break }
              }
              $key = $app.ToLower() -replace "_paths", ""
              Add-Content -Path $env:GITHUB_OUTPUT -Value ($key + "_changed=$changed")
          }
          Write-Host "Changed files content"
          Get-Content $env:GITHUB_OUTPUT

  build-fe1:
    needs: detect-changes
    if: needs.detect-changes.outputs.fe1_changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
    env:
      WORKING_DIRECTORY: apps/fe1
    steps:
      - name: Checkout frontend directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ env.WORKING_DIRECTORY }}
          sparse-checkout-cone-mode: false
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install dependencies
        run: npm ci
      - name: Build frontend app
        run: npm run build

  build-fe2:
    needs: detect-changes
    if: needs.detect-changes.outputs.fe2_changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
    env:
      WORKING_DIRECTORY: apps/fe2
    steps:
      - name: Checkout frontend directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ env.WORKING_DIRECTORY }}
          sparse-checkout-cone-mode: false
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install dependencies
        run: npm ci
      - name: Build frontend app
        run: npm run build
